<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on McElfresh Blog</title>
    <link>https://www.mcelfresh.info/posts/</link>
    <description>Recent content in Posts on McElfresh Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Mar 2024 16:10:46 -0700</lastBuildDate>
    <atom:link href="https://www.mcelfresh.info/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go vs Sinatra vs Rails Part 1</title>
      <link>https://www.mcelfresh.info/posts/go-vs-sinatra-vs-rails/</link>
      <pubDate>Fri, 15 Mar 2024 16:10:46 -0700</pubDate>
      <guid>https://www.mcelfresh.info/posts/go-vs-sinatra-vs-rails/</guid>
      <description>Introduction Here are three JSON APIs which offer the same functionality &amp;ndash; an /api/v1/items endpoint that retrieves 10 items in JSON format.
The Database The APIs are backed by a MySQL database items_api_development that has three tables. The database, tables, and data are created from within rails-items-api, as noted below.
Here is the schema:
users
+------------+--------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +------------+--------------+------+-----+---------+----------------+ | id | bigint | NO | PRI | NULL | auto_increment | | email | varchar(255) | NO | UNI | NULL | | | created_at | datetime(6) | NO | | NULL | | | updated_at | datetime(6) | NO | | NULL | | +------------+--------------+------+-----+---------+----------------+ user_items</description>
    </item>
    <item>
      <title>Create Related Records in Postgres</title>
      <link>https://www.mcelfresh.info/posts/create-multiple-postgres-records-one-query/</link>
      <pubDate>Sat, 02 Mar 2024 11:30:41 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/create-multiple-postgres-records-one-query/</guid>
      <description>Start with Dbmate Dbmate is a SQL database migration tool written in Go. It is the simplest, most usable migration tool I&amp;rsquo;ve found, and I highly encourage you to consider using it in your project, regardless of your project&amp;rsquo;s language.
Here are a few Dbmate migrations you can use to create the tables we&amp;rsquo;ll need for this post:
&amp;gt; dbmate new create_users_table -- migrate:up CREATE TABLE users ( id uuid PRIMARY KEY DEFAULT gen_random_uuid(), email TEXT NOT NULL, created_at timestamptz DEFAULT NOW(), updated_at timestamptz DEFAULT NOW() ); CREATE INDEX idx_user__email ON users (email); -- migrate:down DROP TABLE users; &amp;gt; dbmate new create_items_table -- migrate:up CREATE TABLE items ( id uuid PRIMARY KEY DEFAULT gen_random_uuid(), name TEXT NOT NULL, created_at timestamptz NOT NULL DEFAULT NOW(), updated_at timestamptz NOT NULL DEFAULT NOW() ); CREATE UNIQUE INDEX idx_name_uniq ON items (name); -- migrate:down DROP TABLE items; dbmate new create user_items_table -- migrate:up CREATE TABLE user_items ( user_id uuid NOT NULL REFERENCES users(id) DEFERRABLE, item_id uuid NOT NULL REFERENCES items(id) DEFERRABLE, created_at timestamptz NOT NULL DEFAULT NOW(), updated_at timestamptz NOT NULL DEFAULT NOW() ); CREATE UNIQUE INDEX idx_user_items__user_id_item_id_uniq ON user_items (user_id, item_id); -- migrate:down DROP TABLE user_items; Run this query Common Table Expressions (CTEs), in addition to providing a clean way to express SQL, provide control over the order in which commands are run, as well as the ability to wrap complex commands inside one transaction.</description>
    </item>
    <item>
      <title>How to Sort a Go Array</title>
      <link>https://www.mcelfresh.info/posts/how-to-sort-a-go-array/</link>
      <pubDate>Tue, 02 Jan 2024 14:34:05 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/how-to-sort-a-go-array/</guid>
      <description>Use Go&amp;rsquo;s sort Package to Sort an Array A Go slice is an abstraction built on top of Go&amp;rsquo;s array type. Usually we work with slices, and not with arrays directly &amp;ndash; here&amp;rsquo;s why. But arrays do come in handy at times&amp;ndash;as map keys, for example &amp;ndash; we can&amp;rsquo;t use slices as map keys&amp;ndash;and sometimes we need to sort them.
Let&amp;rsquo;s sort a slice of three items, then try to sort an [3]item array that has identical items in it.</description>
    </item>
    <item>
      <title>User JWTs vs One Encrypted Secure Cookie</title>
      <link>https://www.mcelfresh.info/posts/jwts-vs-secure-cookies/</link>
      <pubDate>Tue, 26 Dec 2023 11:05:54 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/jwts-vs-secure-cookies/</guid>
      <description>Overview JWTs are used in a variety of contexts, but we&amp;rsquo;re going to focus on JWTs and secure cookies, used in browsers, to store user information in the browser, and provide user authentication and authorization to server-side resources.
In my experience, JWTs are often credited with providing security and performance they do not provide. They are called &amp;ldquo;stateless&amp;rdquo;, meaning that they store state on the client, and not on the server.</description>
    </item>
    <item>
      <title>Move My Blog Hosting</title>
      <link>https://www.mcelfresh.info/posts/move-blog-to-digital-ocean/</link>
      <pubDate>Mon, 18 Dec 2023 12:26:51 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/move-blog-to-digital-ocean/</guid>
      <description>Move My Blog Hosting to DigitalOcean App Platform Digital Ocean App Platform is a Platform-as-a-Service (PaaS) offering that allows publishing code directly to DigitalOcean servers, without managing any infrastructure.
I created a Github repo that contains my site&amp;rsquo;s static files, generated from my Hugo static site generator, and I followed this guide to automatically deploy to Digital Ocean&amp;rsquo;s free tier for static sites each time I push to my repo&amp;rsquo;s main branch.</description>
    </item>
    <item>
      <title>Go Slices Are Not Pointers</title>
      <link>https://www.mcelfresh.info/posts/go-slices-are-not-pointers/</link>
      <pubDate>Fri, 15 Dec 2023 12:51:36 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/go-slices-are-not-pointers/</guid>
      <description>What is a Go Slice? A Go slice is a descriptor of an array segment, with three fields:
A pointer to an element of its underlying array The slice&amp;rsquo;s length The slice&amp;rsquo;s capacity I think part of the misconception that &amp;ldquo;slices are pointers&amp;rdquo; arises from the fact that a slice contains a pointer to a value in its underlying array.
Here are two examples where we need slice pointers.
Use a Type, Based on a Slice, as a Pointer Receiver One common idiom is to use a type, based on a slice, as a method receiver, as with a Heap.</description>
    </item>
    <item>
      <title>Twirp -- Build Simple, High Performance Go HTTP Protobuf Services</title>
      <link>https://www.mcelfresh.info/posts/charlie-go-part-1/</link>
      <pubDate>Tue, 28 Nov 2023 11:18:40 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/charlie-go-part-1/</guid>
      <description>Overview Twirp is an RPC / protobuf framework developed by Twitch.tv. It offers some very powerful features:
JSON or protobuf responses, depending on the request Content-Type header (application/protobuf or application/json) Hooks sprinkled throughout the request / response lifecycle Interceptors, Twirp&amp;rsquo;s middleware Auto-generated clients in in all popular languages (Go, Rust, Ruby, Node, Python, etc.) Built on top of Go&amp;rsquo;s net/http package. How it works We&amp;rsquo;re going to walk through the code in some detail, and there is a lot to absorb.</description>
    </item>
    <item>
      <title>Deploy Static Website to Fargate (Part 4)</title>
      <link>https://www.mcelfresh.info/posts/hugo-aws-part-4/</link>
      <pubDate>Sat, 25 Nov 2023 11:18:40 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/hugo-aws-part-4/</guid>
      <description>Create AWS Resources with Terraform and Deploy to Fargate Overview In parts 1-3, we created a static website using Hugo, we output static html files with the &amp;ldquo;hugo&amp;rdquo; command, and we copied those files into a Docker image, which we plan to deploy to AWS Fargate.
Aside from basic SOA and NS records we create manually in AWS Route53, everything else in our stack is created with Terraform, from files in the &amp;ldquo;build&amp;rdquo; directory at the root of the app.</description>
    </item>
    <item>
      <title>Deploy Static Website to Fargate (Part 3)</title>
      <link>https://www.mcelfresh.info/posts/hugo-aws-part-3/</link>
      <pubDate>Sat, 25 Nov 2023 11:18:40 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/hugo-aws-part-3/</guid>
      <description>Create Our Site Docker Image To create static files to serve in production, run
hugo
and notice all the new static files that were generated in /public
Build our Nginx Container Start with a popular, stable Nginx container docker pull nginx:alpine
Start up an nginx:alpine container: docker run -it &amp;lt;image id&amp;gt;
Copy its nginx default.conf into our project docker cp &amp;lt;container name or image id&amp;gt;:/etc/nginx/conf.d/default.conf ~/
Or, shell into the container docker exec -it &amp;lt;image name or id&amp;gt; sh cd /etc/nginx ## copy entire file contents into memory Add a healthcheck to our copy of nginx.</description>
    </item>
    <item>
      <title>Deploy Static Website to Fargate (Part 2)</title>
      <link>https://www.mcelfresh.info/posts/hugo-aws-part-2/</link>
      <pubDate>Sat, 25 Nov 2023 11:18:40 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/hugo-aws-part-2/</guid>
      <description>Create Our Blog as a Static Site with Hugo Hugo is a static site generator written in Go. We write static pages in Markdown, then choose a theme (I chose Ezhil), then Hugo will generate static HTML with our theme&amp;rsquo;s CSS.
Install Hugo
Create our site
hugo new site charlie-blog cd charlie-blog git init git submodule add https://github.com/vividvilla/ezhil themes/ezhil echo &amp;#34;theme = &amp;#39;ezhil&amp;#39;&amp;#34; &amp;gt;&amp;gt; hugo.toml hugo server Now Hugo should be running on http://localhost:1313</description>
    </item>
    <item>
      <title>Deploy Static Website to Fargate (Part 1)</title>
      <link>https://www.mcelfresh.info/posts/hugo-aws-part-1/</link>
      <pubDate>Sat, 25 Nov 2023 11:18:40 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/hugo-aws-part-1/</guid>
      <description>Hugo, Elastic Container Registry (ECR), Fargate, Elastic Container Service (ECS), Application Load Balancer (ALB), Route53, Amazon Certificate Manager (ACM), Built with Terraform Hugo is a static site generator that allows for writing pages in Markdown, then displays them in HTML Nginx I&amp;rsquo;m building my static site in an alpine:nginx container, and pushing it to a private Amazon Elastic Container Registry Build and deploy to Amazon Web Services (AWS) using Terraform Terraform is an Infrastructure as code tool.</description>
    </item>
  </channel>
</rss>
