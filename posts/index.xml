<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on McElfresh Blog</title>
    <link>https://www.mcelfresh.info/posts/</link>
    <description>Recent content in Posts on McElfresh Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jan 2025 22:53:56 -0800</lastBuildDate>
    <atom:link href="https://www.mcelfresh.info/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Interfaces Part 4</title>
      <link>https://www.mcelfresh.info/posts/go-interfaces-method-sets-practical-patterns/</link>
      <pubDate>Sat, 11 Jan 2025 22:53:56 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/go-interfaces-method-sets-practical-patterns/</guid>
      <description>Intro Method set interfaces interfaces provide means to describe and implement useful, prescribed, and suggested behaviors.&#xA;I&amp;rsquo;ll refer to &amp;ldquo;method set interfaces&amp;rdquo; simply as &amp;ldquo;interfaces&amp;rdquo; throughout this blog post.&#xA;Exported Types Among the primary reasons to export an interface type: 1) to provide a simple type that is integral to commonly-used packages (fmt.Stringer); 2) to provide a commonly-used building block (io.Reader, io.Writer, etc.), 3) to provide prescribed behaviors (sort.Interface, Twirp exported service interfaces, imported interfaces), 4) to provide suggested behaviors (logrus.</description>
    </item>
    <item>
      <title>Go Interfaces Part 3</title>
      <link>https://www.mcelfresh.info/posts/go-interfaces-method-sets-borrowing/</link>
      <pubDate>Tue, 07 Jan 2025 21:26:09 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/go-interfaces-method-sets-borrowing/</guid>
      <description>Borrowing Structs, as well as non-primitive types, are objects in Go. Go allows for object oriented programming, of a kind.&#xA;Go has no classes or inheritance, but it does provide the ability for one object to borrow behavior from another object, through the use of method set interfaces.&#xA;In the following example, cats are animals, whereas dogs only purport to be:&#xA;Try it on The Go Playground&#xA;1package main 2import &amp;#34;fmt&amp;#34; 3 4type animal interface { 5&#x9;speak() 6&#x9;walk() 7} 8 9type cat struct {} 10type dog struct { 11&#x9;// embed the animal interface into dog 12&#x9;animal 13} 14 15func (d dog) speak() { 16&#x9;fmt.</description>
    </item>
    <item>
      <title>Go Interfaces Part 2</title>
      <link>https://www.mcelfresh.info/posts/go-interfaces-method-sets-assignment/</link>
      <pubDate>Tue, 07 Jan 2025 21:26:09 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/go-interfaces-method-sets-assignment/</guid>
      <description>Method Sets: Assignment A concrete type implements an interface where it implements at least all that interface&amp;rsquo;s methods.&#xA;We can assign a concrete type to an interface variable in five ++ ways:&#xA;Assign a Concrete Value to an Interface Value Try it on The Go Playground&#xA;1package main 2import &amp;#34;fmt&amp;#34; 3 4var i interface{} 5n := 1 6// Set interface value&amp;#39;s concrete object to n 7i = n 8fmt.Println(&amp;#34;i: %d\n&amp;#34;, i) Pass a Concrete Type as a Method Parameter Try it on The Go Playground</description>
    </item>
    <item>
      <title>Go Interfaces Part 1</title>
      <link>https://www.mcelfresh.info/posts/go-interfaces-introduction/</link>
      <pubDate>Tue, 07 Jan 2025 21:26:09 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/go-interfaces-introduction/</guid>
      <description>Go has two kinds of interfaces: method sets, whose function is to allow for various kinds of composition, and type constraints, which allow for generics.</description>
    </item>
    <item>
      <title>TypeScript Concurrency</title>
      <link>https://www.mcelfresh.info/posts/typescript-concurrency/</link>
      <pubDate>Fri, 24 May 2024 14:45:10 -0700</pubDate>
      <guid>https://www.mcelfresh.info/posts/typescript-concurrency/</guid>
      <description>TypeScript uses type inference to provide some type safety. It &amp;ldquo;compiles&amp;rdquo; into JavaScript, and has become a popular enhancement to JavaScript applications.&#xA;JavaScript is single-threaded. Its concurrency mechanism is its event loop. In a nutshell, here&amp;rsquo;s how the JavaScript event loop works:&#xA;There are two pieces to the JavaScript event loop: The event loop itself, and the event FIFO (First In First Out) queue.&#xA;This is very useful where it comes to IO, such as networking IO, or reading files.</description>
    </item>
    <item>
      <title>Go vs Postgrest vs Sinatra vs Rails</title>
      <link>https://www.mcelfresh.info/posts/go-vs-postgrest-vs-sinatra-vs-rails/</link>
      <pubDate>Sat, 06 Apr 2024 16:10:46 -0700</pubDate>
      <guid>https://www.mcelfresh.info/posts/go-vs-postgrest-vs-sinatra-vs-rails/</guid>
      <description>Introduction Here are four JSON APIs which offer the same functionality &amp;ndash; an endpoint that retrieves 10 items, connected with randomly selected users via user_items, in JSON format.&#xA;The Database The APIs are backed by a PostgreSQL database items_api_development that has three tables. The database, tables, and data are created from within postgrest-items-api, as noted below.&#xA;Here is the schema:&#xA;users&#xA;1+------------+--------------+------+-----+---------+----------------+ 2| Field | Type | Null | Key | Default | Extra | 3+------------+--------------+------+-----+---------+----------------+ 4| id | bigint | NO | PRI | NULL | auto_increment | 5| email | varchar(255) | NO | UNI | NULL | | 6| created_at | datetime(6) | NO | | NULL | | 7| updated_at | datetime(6) | NO | | NULL | | 8+------------+--------------+------+-----+---------+----------------+ user_items</description>
    </item>
    <item>
      <title>Create Related Records in Postgres</title>
      <link>https://www.mcelfresh.info/posts/create-multiple-postgres-records-one-query/</link>
      <pubDate>Sat, 02 Mar 2024 11:30:41 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/create-multiple-postgres-records-one-query/</guid>
      <description>Start with Dbmate Dbmate is a SQL database migration tool written in Go. It is the simplest, most usable migration tool I&amp;rsquo;ve found, and I highly encourage you to consider using it in your project, regardless of your project&amp;rsquo;s language.&#xA;Here are a few Dbmate migrations you can use to create the tables we&amp;rsquo;ll need for this post:&#xA;1$ dbmate new create_users_table Inside your newly created migration:&#xA;1-- migrate:up 2 3CREATE TABLE users ( 4 id uuid PRIMARY KEY DEFAULT gen_random_uuid(), 5 email TEXT NOT NULL, 6 created_at timestamptz DEFAULT NOW(), 7updated_at timestamptz DEFAULT NOW() 8); 9 10CREATE INDEX idx_user__email ON users (email); 11 12-- migrate:down 13 14DROP TABLE users; 1&amp;gt; dbmate new create_items_table Inside your newly created migration:</description>
    </item>
    <item>
      <title>How to Sort a Go Array</title>
      <link>https://www.mcelfresh.info/posts/how-to-sort-a-go-array/</link>
      <pubDate>Tue, 02 Jan 2024 14:34:05 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/how-to-sort-a-go-array/</guid>
      <description>Use Go&amp;rsquo;s sort Package to Sort an Array A Go slice is an abstraction built on top of Go&amp;rsquo;s array type. Usually we work with slices, and not with arrays directly &amp;ndash; here&amp;rsquo;s why. But arrays do come in handy at times&amp;ndash;as map keys, for example &amp;ndash; we can&amp;rsquo;t use slices as map keys&amp;ndash;and sometimes we need to sort them.&#xA;Let&amp;rsquo;s sort a slice of three items, then try to sort an [3]item array that has identical items in it.</description>
    </item>
    <item>
      <title>User JWTs vs One Encrypted Secure Cookie</title>
      <link>https://www.mcelfresh.info/posts/jwts-vs-secure-cookies/</link>
      <pubDate>Tue, 26 Dec 2023 11:05:54 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/jwts-vs-secure-cookies/</guid>
      <description>Overview JWTs are used in a variety of contexts, but we&amp;rsquo;re going to focus on JWTs and secure cookies, used in browsers, to store user information in the browser, and provide user authentication and authorization to server-side resources.&#xA;In my experience, JWTs are often credited with providing security and performance they do not provide. They are called &amp;ldquo;stateless&amp;rdquo;, meaning that they store state on the client, and not on the server.</description>
    </item>
    <item>
      <title>Move My Blog Hosting</title>
      <link>https://www.mcelfresh.info/posts/move-blog-to-digital-ocean/</link>
      <pubDate>Mon, 18 Dec 2023 12:26:51 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/move-blog-to-digital-ocean/</guid>
      <description>Move My Blog Hosting to DigitalOcean App Platform Digital Ocean App Platform is a Platform-as-a-Service (PaaS) offering that allows publishing code directly to DigitalOcean servers, without managing any infrastructure.&#xA;I created a Github repo that contains my site&amp;rsquo;s static files, generated from my Hugo static site generator, and I followed this guide to automatically deploy to Digital Ocean&amp;rsquo;s free tier for static sites each time I push to my repo&amp;rsquo;s main branch.</description>
    </item>
    <item>
      <title>Go Slices Are Not Pointers</title>
      <link>https://www.mcelfresh.info/posts/go-slices-are-not-pointers/</link>
      <pubDate>Fri, 15 Dec 2023 12:51:36 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/go-slices-are-not-pointers/</guid>
      <description>What is a Go Slice? A Go slice is a descriptor of an array segment, with three fields:&#xA;A pointer to an element of its underlying array The slice&amp;rsquo;s length The slice&amp;rsquo;s capacity I think part of the misconception that &amp;ldquo;slices are pointers&amp;rdquo; arises from the fact that a slice contains a pointer to a value in its underlying array.&#xA;Here are two examples where we need slice pointers.&#xA;Use a Type, Based on a Slice, as a Pointer Receiver One common idiom is to use a type, based on a slice, as a method receiver, as with a Heap.</description>
    </item>
    <item>
      <title>Twirp -- Build Simple, High Performance Go HTTP Protobuf Services</title>
      <link>https://www.mcelfresh.info/posts/charlie-go-part-1/</link>
      <pubDate>Tue, 28 Nov 2023 11:18:40 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/charlie-go-part-1/</guid>
      <description>Overview Twirp is an RPC / protobuf framework developed by Twitch.tv. It offers some very powerful features:&#xA;JSON or protobuf responses, depending on the request Content-Type header (application/protobuf or application/json) Hooks sprinkled throughout the request / response lifecycle Interceptors, Twirp&amp;rsquo;s middleware Auto-generated clients in in all popular languages (Go, Rust, Ruby, Node, Python, etc.) Built on top of Go&amp;rsquo;s net/http package. How it works We&amp;rsquo;re going to walk through the code in some detail, and there is a lot to absorb.</description>
    </item>
    <item>
      <title>Deploy Static Website to Fargate (Part 4)</title>
      <link>https://www.mcelfresh.info/posts/hugo-aws-part-4/</link>
      <pubDate>Sat, 25 Nov 2023 11:18:40 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/hugo-aws-part-4/</guid>
      <description>Create AWS Resources with Terraform and Deploy to Fargate Overview In parts 1-3, we created a static website using Hugo, we output static html files with the &amp;ldquo;hugo&amp;rdquo; command, and we copied those files into a Docker image, which we plan to deploy to AWS Fargate.&#xA;Aside from basic SOA and NS records we create manually in AWS Route53, everything else in our stack is created with Terraform, from files in the &amp;ldquo;build&amp;rdquo; directory at the root of the app.</description>
    </item>
    <item>
      <title>Deploy Static Website to Fargate (Part 3)</title>
      <link>https://www.mcelfresh.info/posts/hugo-aws-part-3/</link>
      <pubDate>Sat, 25 Nov 2023 11:18:40 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/hugo-aws-part-3/</guid>
      <description>Create Our Site Docker Image To create static files to serve in production, run&#xA;1$ hugo and notice all the new static files that were generated in /public&#xA;Build our Nginx Container Start with a popular, stable Nginx container 1$ docker pull nginx:alpine&#xA;Start up an nginx:alpine container:&#xA;1$ docker run -it &amp;lt;image id&amp;gt; Copy its nginx default.conf into our project 1$ docker cp &amp;lt;container name or image id&amp;gt;:/etc/nginx/conf.d/default.conf ~/ Or, shell into the container 1$ docker exec -it &amp;lt;image name or id&amp;gt; sh 2$ cd /etc/nginx Add a healthcheck to our copy of nginx.</description>
    </item>
    <item>
      <title>Deploy Static Website to Fargate (Part 2)</title>
      <link>https://www.mcelfresh.info/posts/hugo-aws-part-2/</link>
      <pubDate>Sat, 25 Nov 2023 11:18:40 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/hugo-aws-part-2/</guid>
      <description>Create Our Blog as a Static Site with Hugo Hugo is a static site generator written in Go. We write static pages in Markdown, then choose a theme (I chose Ezhil), then Hugo will generate static HTML with our theme&amp;rsquo;s CSS.&#xA;Install Hugo&#xA;Create our site&#xA;1$ hugo new site charlie-blog 2$ cd charlie-blog 3$ git init 4$ git submodule add https://github.com/vividvilla/ezhil themes/ezhil 5$ echo &amp;#34;theme = &amp;#39;ezhil&amp;#39;&amp;#34; &amp;gt;&amp;gt; hugo.toml 6$ hugo server Now Hugo should be running on http://localhost:1313</description>
    </item>
    <item>
      <title>Deploy Static Website to Fargate (Part 1)</title>
      <link>https://www.mcelfresh.info/posts/hugo-aws-part-1/</link>
      <pubDate>Sat, 25 Nov 2023 11:18:40 -0800</pubDate>
      <guid>https://www.mcelfresh.info/posts/hugo-aws-part-1/</guid>
      <description>Hugo, Elastic Container Registry (ECR), Fargate, Elastic Container Service (ECS), Application Load Balancer (ALB), Route53, Amazon Certificate Manager (ACM), Built with Terraform Hugo is a static site generator that allows for writing pages in Markdown, then displays them in HTML Nginx I&amp;rsquo;m building my static site in an alpine:nginx container, and pushing it to a private Amazon Elastic Container Registry Build and deploy to Amazon Web Services (AWS) using Terraform Terraform is an Infrastructure as code tool.</description>
    </item>
  </channel>
</rss>
